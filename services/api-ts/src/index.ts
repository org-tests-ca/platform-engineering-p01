// src/index.ts

import express from 'express'; // Importa o express
import cors from 'cors'; // âœ… Importa o middleware CORS
import { helloRouter } from './routes/hello.routes'; // Importa o roteador de saudaÃ§Ã£o
import { userRouter } from './routes/user.routes'; // Importa o roteador de usuÃ¡rios
import { authRouter } from './routes/auth.routes'; // Importa o roteador de autenticaÃ§Ã£o
import { connectToMongo } from './config/mongo'; // Importa a funÃ§Ã£o de conexÃ£o com o MongoDB
import { connectToRedis } from './config/redis'; // Importa a funÃ§Ã£o de conexÃ£o com o Redis
import { swaggerUi, swaggerDocument } from './docs/swagger'; // Importa documentaÃ§Ã£o Swagger YAML

const app = express(); // Cria uma instÃ¢ncia do express
const PORT = 4600; // Define a porta do servidor

// âœ… Middleware para permitir CORS (todas as origens durante o desenvolvimento)
app.use(cors());
// app.use(cors({
//   origin: 'http://localhost:3001', // ou a porta definida no .env do frontend
// }));

// Middleware para interpretar JSON no corpo das requisiÃ§Ãµes
app.use(express.json());

// Rotas
app.use('/hello', helloRouter); // monta o roteador na rota /hello
app.use('/users', userRouter); // monta o roteador de usuÃ¡rios na rota /users
app.use('/auth', authRouter); // monta o roteador de autenticaÃ§Ã£o na rota /auth

// Rota para acessar a documentaÃ§Ã£o Swagger gerada via YAML
app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

// Conecta ao MongoDB e Redis antes de iniciar o servidor
connectToMongo().then(async () => {
  await connectToRedis(); // aguarda a conexÃ£o com Redis antes de iniciar
  app.listen(PORT, () => { // Inicia o servidor na porta definida
    console.log(`ðŸš€ Servidor rodando na porta ${PORT}`);
    console.log(`ðŸ“š DocumentaÃ§Ã£o disponÃ­vel em http://localhost:${PORT}/docs`);
  });
});
